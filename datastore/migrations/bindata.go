// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package migrations generated by go-bindata.// sources:
// datastore/migrations/000001_create_merchants.down.sql
// datastore/migrations/000001_create_merchants.up.sql
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_create_merchantsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\xc8\x4d\x2d\x4a\xce\x48\xcc\x2b\x29\x56\x70\x76\x0c\x76\x76\x74\x71\xb5\x06\x04\x00\x00\xff\xff\x37\xdc\xb4\xab\x27\x00\x00\x00")

func _000001_create_merchantsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_create_merchantsDownSql,
		"000001_create_merchants.down.sql",
	)
}

func _000001_create_merchantsDownSql() (*asset, error) {
	bytes, err := _000001_create_merchantsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_create_merchants.down.sql", size: 39, mode: os.FileMode(438), modTime: time.Unix(1624922729, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __000001_create_merchantsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xc1\x6e\xea\x30\x10\x45\xf7\xf9\x8a\xbb\x04\xe9\x81\x78\xea\xb2\x2b\x43\x5d\xb0\x1a\x0c\x35\x4e\x5b\xba\x89\x9c\x78\x28\x91\x88\x8d\x6c\x47\x2d\x7f\x5f\x25\x12\x85\xcd\x48\xa3\x7b\xce\x9d\x99\x4c\x70\xf2\xc6\x46\x18\x38\xfa\x06\xfd\x24\x72\xb1\xf1\x0e\x8d\x4b\x1e\xe9\x48\xa8\xbb\x10\xc8\x25\x58\x93\x4c\x65\x22\x4d\xa1\x8f\x14\x08\x6d\x17\x13\x9c\x4f\xa8\x08\xc6\xdd\x99\xfe\x30\x78\xd1\xb4\x04\xd7\x0f\x73\x0a\x64\xec\x65\x38\x44\x76\x9a\x2d\x14\x67\x9a\x83\x7f\x68\x2e\x77\x62\x23\x71\xfe\xaa\xc3\xe5\x9c\xfc\x63\x76\xcd\x34\x9b\xe7\x1c\x2d\x85\xfa\x68\x5c\x8a\x18\x65\x40\x63\x31\x17\xcb\x1d\x57\x82\xe5\x90\x1b\x0d\x59\xe4\x39\xb6\x4a\xac\x99\xda\xe3\x85\xef\xff\x65\x80\xeb\xda\x8a\x42\xe9\x0f\xe5\x39\x78\xdb\xd5\x09\x42\x6a\xbe\xe4\xaa\x0f\xa9\x35\xcd\x09\x6f\x4c\x2d\x56\x4c\x8d\x1e\x66\xb3\xf1\xad\xa7\x90\xe2\xb5\xe0\x3d\x55\x75\xb1\x71\x14\x63\x39\x3c\x7f\xa5\xff\xdf\xd3\x3d\x56\x07\x32\x89\x6c\x69\x12\xb4\x58\xf3\x9d\x66\xeb\x2d\xde\x85\x5e\x0d\x2b\x3e\x37\x92\xdf\xda\x9f\xf8\x33\x2b\x72\x8d\x45\xa1\x14\x97\xba\xfc\x33\xb2\xf1\x6f\x00\x00\x00\xff\xff\xd8\xe4\x70\x7c\x82\x01\x00\x00")

func _000001_create_merchantsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_create_merchantsUpSql,
		"000001_create_merchants.up.sql",
	)
}

func _000001_create_merchantsUpSql() (*asset, error) {
	bytes, err := _000001_create_merchantsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_create_merchants.up.sql", size: 386, mode: os.FileMode(438), modTime: time.Unix(1624973122, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_create_merchants.down.sql": _000001_create_merchantsDownSql,
	"000001_create_merchants.up.sql":   _000001_create_merchantsUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_create_merchants.down.sql": &bintree{_000001_create_merchantsDownSql, map[string]*bintree{}},
	"000001_create_merchants.up.sql":   &bintree{_000001_create_merchantsUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
